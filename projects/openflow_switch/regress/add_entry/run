#!/usr/bin/perl

use strict;
use OpenFlowLib;
use NFUtils::SimplePacket;
use NF::TestLib;
use Test::TestLib;

my @interfaces = ("eth1", "nf2c0", "eth2", "nf2c1", "eth3", "nf2c2", "eth4", "nf2c3");

nftest_init(\@ARGV,\@interfaces,);
nftest_start(\@interfaces);

require "reg_defines_openflow_switch.ph";

####################################################################
# Setup the fields
#

my @entries = (

	       # Entry 0
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 0,
		 "output_port" => "01010100"},

	       # Entry 1
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 2,
		 "output_port" => "01010001"},

	       # Entry 2
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 4,
		 "output_port" => "01000101"},

	       # Entry 3
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 6,
		 "output_port" => "00010101"},

	       # Entry 4
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 0,
		 "output_port" => "01010100"},

	       # Entry 5
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 2,
		 "output_port" => "01010001"},

	       # Entry 6
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 4,
		 "output_port" => "01000101"},

	       # Entry 7
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 6,
		 "output_port" => "00010101"},

	       # Entry 8
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 0,
		 "output_port" => "01010100"},

	       # Entry 9
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 2,
		 "output_port" => "01010001"},

	       # Entry 10
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 4,
		 "output_port" => "01000101"},

	       # Entry 11
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 6,
		 "output_port" => "00010101"},

	       # Entry 12
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 0,
		 "output_port" => "01010100"},

	       # Entry 13
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 2,
		 "output_port" => "01010001"},

	       # Entry 14
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 4,
		 "output_port" => "01000101"},

	       # Entry 15
	       { NFUtils::SimplePacket::TRANSP_DST() => "wildcard",
		 NFUtils::SimplePacket::TRANSP_SRC() => "wildcard",
		 NFUtils::SimplePacket::IP_PROTO() => "wildcard",
		 NFUtils::SimplePacket::IP_DST() => "wildcard",
		 NFUtils::SimplePacket::IP_SRC() => "wildcard",
		 NFUtils::SimplePacket::VLAN_TAG() => "wildcard",
		 NFUtils::SimplePacket::ETH_TYPE() => NFUtils::SimplePacket::ETH_TYPE_ARP,
		 NFUtils::SimplePacket::ETH_DST() => "FF:FF:FF:FF:FF:FF",
		 NFUtils::SimplePacket::ETH_SRC() => "wildcard",
		 NFUtils::SimplePacket::SRC_PORT() => 6,
		 "output_port" => "00010101"}
	      );

####################################################################
# execute the writes
#
my $table = OpenFlowTable->new(iface => 'nf2c0');

my $index = 0;
foreach my $entry_args (@entries) {
  # Remove wildcards
  while( my ($field, $val) = (each %{$entry_args}) ){
    delete $entry_args->{$field} if($val eq 'wildcard');
  }

  # create entry
  my $flow = OpenFlowHdr->new(%{$entry_args});

  # select actions
  my $action = OpenFlowAction->new('forward' => bintodec($entry_args->{output_port}));

  # insert into table
  my $type = $flow->getType();
  $table->addEntry($flow, $action, $type, $index++);
}

sub bintodec {
  unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
}
